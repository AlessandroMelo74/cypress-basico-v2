/// <reference types="Cypress" />

describe('Central de Atendimento ao Cliente TAT', function() {
  const THREE_SECONDS_IN_ML = 3000
    beforeEach(function() {
      cy.visit('./src/index.html')

    })

    it('verifica o t칤tulo da aplica칞칚o', function() {
      cy.title().should('be.equal', 'Central de Atendimento ao Cliente TAT')
        })

   
    it('preenche os campos obrigat칩rios e envia o formul치rio', function() {
      const longtext = 'Que ele seja o ve칤culo de morbi dui sapien venenatis amanh칚 ligula, purus senectus deixe ligula maleuada luctus dictum aliquam, condimentum vitae proin apenas morbi sadis intacto. molestie risus tellus dictumst nam tempor.'
        cy.clock()      
        cy.get('#firstName').type('Alessandro')
        cy.get('#lastName').type('Melo')
        cy.get('#email').type('alessandromelo74@gmail.com')
        cy.get('#open-text-area').type(longtext, {delay: 10})
        cy.contains('button', 'Enviar').click()
        cy.get('.success').should('be.visible') 
        cy.tick(THREE_SECONDS_IN_ML)
        cy.get('.success').should('not.be.visible') 
        
    })
    
    it('Exibe mensagem de erro ao submeter o formulario com um email com formata칞칚o invalida', function(){
      cy.clock()
      cy.get('#firstName').type('Alessandro')
      cy.get('#lastName').type('Melo')
      cy.get('#email').type('alessandromelo74@gmail,com')
      cy.get('#open-text-area').type('TEXTO PADR츾O DE TESTE')
      cy.contains('button', 'Enviar').click()
      cy.get('.error').should('be.visible') 
      cy.tick(THREE_SECONDS_IN_ML)
      cy.get('.error').should('not.be.visible')
    })
 
   Cypress._.times(3, function() {
    it('Campo telefone continua vazio quando preenchido com valor n칚o numerico', function (){
      cy.get('#phone')
        .type('abcdefgh')
         .should('have.value', '')
     })
  })

   it('exibe mensagem de erro quando o telefone se torna obrigat칩rio mas n칚o preenchido', function(){
      cy.clock()
      cy.get('#firstName').type('Alessandro')
      cy.get('#lastName').type('Melo')
      cy.get('#email').type('alessandromelo74@gmail.com')
      cy.get('#phone-checkbox').check()
      cy.get('#open-text-area').type('TEXTO PADR츾O DE TESTE')
      cy.contains('button', 'Enviar').click()
      cy.get('.error').should('be.visible') 
      cy.tick(THREE_SECONDS_IN_ML)
      cy.get('.error').should('not.be.visible')

   })

   it('Preenche e limpa os campos nome, sobrenome, email e telefone', function () {
    cy.get('#firstName')
      .type('Alessandro')
      .should('have.value', 'Alessandro')
      .clear()
      .should('have.value', '')
      cy.get('#lastName')
      .type('Melo')
      .should('have.value', 'Melo')
      .clear()
      .should('have.value', '')
      cy.get('#email')
      .type('alesandromelo74@gmail.com')
      .should('have.value', 'alesandromelo74@gmail.com')
      .clear()
      .should('have.value', '')
      cy.get('#phone')
      .type('123456789')
      .should('have.value', '123456789')
      .clear()
      .should('have.value', '')

   })

   it('Exibe Mensagem de erro ao submeter o formulario sem preencher os campos obrigatorios', function (){
      cy.clock()
      cy.contains('button', 'Enviar').click()
      cy.get('.error').should('be.visible') 
      cy.tick(THREE_SECONDS_IN_ML)
      cy.get('.error').should('not.be.visible')
   })

    it('Envia o formulario com Sucesso usando um comando customizado',function(){
    cy.fillMandatoryFieldsAndSumit()    
    })

   it('Seleciona um produto (Mentoria) por seu valor (value)', function(){
    cy.get('#product')
      .select('mentoria')
      .should('have.value', 'mentoria')
   })

   it('Seleciona um produto (Blog) por seu indice)', function(){
    cy.get('#product')
      .select(1)
      .should('have.value', 'blog')
   })

   it('Marca o tipo de atendimento (Feedbck)', function(){
    cy.get('input[type="radio"][value="feedback"]')
    .check()
    .should('have.value', 'feedback')
   })

   it('Marca Cada tipo de atendimento', function (){
    cy.get('input[type="radio"]')
    .should('have.length', 3)
    .each(function($radio) {
      cy.wrap($radio).check()
      cy.wrap($radio).should('be.checked')
      }) 
    })

    it('Marca Ambos checkbox, depois desmarca o ultimo', function (){
    cy.get('input[type="checkbox"]')
    .check()
    .should('be.checked')
    .last()
    .uncheck() 
    .should('not.be.checked')
    })

    it('Fazendo Upload de arquivos com Cypress', function(){
      cy.get('input[type="file"]#file-upload')
      .should('not.have.value')
      .selectFile('cypress/fixtures/example.json')
      .should(function($input) {
        expect($input[0].files[0].name).to.equal('example.json')
      })
    })

    it('Seleciona um arquivo simulando um drag-and-drop', function(){
      cy.get('input[type="file"]#file-upload')
      .should('not.have.value')
      .selectFile('cypress/fixtures/example.json', {action:'drag-drop'})
      .should(function($input) {
        expect($input[0].files[0].name).to.equal('example.json')
      })
    })

    it('seleciona um arquivo utilizando uma fixture para a qual foi dada um alias',function (){
      cy.fixture('example.json').as('sampleFile')
      cy.get('input[type="file"]#file-upload')
      .selectFile('@sampleFile')
      .should(function($input) {
        expect($input[0].files[0].name).to.equal('example.json')
    })    
   })

    it('verifica que a pol칤tica de privacidade abre em outra aba sem a necessidade de um clique',function(){
      cy.get('#privacy a').should('have.attr', 'target', '_blank')
    })

    it('acessa a p치gina da pol칤tica de privacidade removendo o target e ent칚o clicando no link', function(){
      cy.get('#privacy a')
      .invoke('removeAttr', 'target')
      .click()
      cy.contains('Talking About Testing').should('be.visible')
    })
    
    it('Exibe e esconde as mensagens de sucesso e erro usando o .invoke', () => {
      cy.get('.success')
        .should('not.be.visible')
        .invoke('show')
        .should('be.visible')
        .and('contain', 'Mensagem enviada com sucesso.')
        .invoke('hide')
        .should('not.be.visible')
      cy.get('.error')
        .should('not.be.visible')
        .invoke('show')
        .should('be.visible')
        .and('contain', 'Valide os campos obrigat칩rios!')
        .invoke('hide')
        .should('not.be.visible')
    })

    it('Preenche a area de texto usando o comando invoke', function() {
      const longText = Cypress._.repeat('0123456789', 20)
    cy.get('#open-text-area')
    .invoke('val',longText)
    .should('have.value', longText)
  })

    it('Simulando o Viewport_ de um dispositivo m칩vel', function(){
    
    })

    it('Encotra o gato escondido', function(){
      cy.get('#cat')
       .invoke('show')
       .should('be.visible')
       cy.get('#title')
       .invoke('text', 'Shark The Best')
       cy.get('#subtitle')
       .invoke('text', 'Eu sou Foda 游삤游낕')

     })
it('Faz uma requisi칞칚 HTTP', function(){
  cy.request('https://cac-tat.s3.eu-central-1.amazonaws.com/index.html')
  .should(function(response) {
    console.log(response)
    const { status, statusText, body } = response
    expect(status).to.equal(200)
    expect(statusText).to.equal('OK')
    expect(body).to.include('CAC TAT')
    })
  })
})